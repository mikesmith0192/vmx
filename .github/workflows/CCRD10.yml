name: CCRD10

on:
  # This section configures the manual trigger to ask for 10 auth codes.
  workflow_dispatch:
    inputs:
      auth_code_1:
        description: 'CRD Auth Code for Runner 1'
        required: true
        type: string
      auth_code_2:
        description: 'CRD Auth Code for Runner 2'
        required: true
        type: string
      auth_code_3:
        description: 'CRD Auth Code for Runner 3'
        required: true
        type: string
      auth_code_4:
        description: 'CRD Auth Code for Runner 4'
        required: true
        type: string
      auth_code_5:
        description: 'CRD Auth Code for Runner 5'
        required: true
        type: string
      auth_code_6:
        description: 'CRD Auth Code for Runner 6'
        required: true
        type: string
      auth_code_7:
        description: 'CRD Auth Code for Runner 7'
        required: true
        type: string
      auth_code_8:
        description: 'CRD Auth Code for Runner 8'
        required: true
        type: string
      auth_code_9:
        description: 'CRD Auth Code for Runner 9'
        required: true
        type: string
      auth_code_10:
        description: 'CRD Auth Code for Runner 10'
        required: true
        type: string

jobs:
  build:
    # The job name is dynamic and includes the runner ID from the matrix.
    name: Runner ${{ matrix.runner_id }}
    runs-on: windows-latest
    timeout-minutes: 360

    strategy:
      # This ensures that a failure in one job does not cancel the others.
      fail-fast: false
      matrix:
        runner_id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        # 'include' is used to map each runner ID to its corresponding auth code input.
        include:
          - runner_id: 1
            auth_code: ${{ github.event.inputs.auth_code_1 }}
          - runner_id: 2
            auth_code: ${{ github.event.inputs.auth_code_2 }}
          - runner_id: 3
            auth_code: ${{ github.event.inputs.auth_code_3 }}
          - runner_id: 4
            auth_code: ${{ github.event.inputs.auth_code_4 }}
          - runner_id: 5
            auth_code: ${{ github.event.inputs.auth_code_5 }}
          - runner_id: 6
            auth_code: ${{ github.event.inputs.auth_code_6 }}
          - runner_id: 7
            auth_code: ${{ github.event.inputs.auth_code_7 }}
          - runner_id: 8
            auth_code: ${{ github.event.inputs.auth_code_8 }}
          - runner_id: 9
            auth_code: ${{ github.event.inputs.auth_code_9 }}
          - runner_id: 10
            auth_code: ${{ github.event.inputs.auth_code_10 }}

    steps:
      - name: Download & Install Chrome Remote Desktop
        run: |
          Invoke-WebRequest -Uri "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi" -OutFile "chromeremotedesktophost.msi"
          Start-Process msiexec.exe -Wait -ArgumentList '/i chromeremotedesktophost.msi /quiet'

      - name: Start Chrome Remote Desktop Host
        # The auth code and runner ID from the matrix are used here.
        # The computer name is appended with the runner ID for uniqueness.
        run: |
          & "${env:ProgramFiles(x86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe" --code="${{ matrix.auth_code }}" --redirect-url="https://remotedesktop.google.com/_/oauthredirect" --name="$env:COMPUTERNAME-${{ matrix.runner_id }}" --pin=112233

      - name: Time Counter
        run: |
          # Simple PowerShell timer for 6 hours (21600 seconds)
          $startTime = Get-Date
          $endTime = $startTime.AddSeconds(21600)
          Write-Host "Timer started at $startTime"
          while ((Get-Date) -lt $endTime) {
            $elapsed = (Get-Date) - $startTime
            Write-Host "Elapsed time: $($elapsed.Hours)h $($elapsed.Minutes)m $($elapsed.Seconds)s"
            Start-Sleep -Seconds 60  # Update every minute
          }
          Write-Host "Timer completed after 6 hours at $(Get-Date)"

      - name: Keep Alive
        run: |
          # Set duration to 6 hours (21600 seconds)
          $duration = 21600
          $interval = 300  # Check every 5 minutes (300 seconds)
          $endTime = (Get-Date).AddSeconds($duration)

          Write-Host "Starting keep-alive loop for 6 hours..."
          while ((Get-Date) -lt $endTime) {
            Write-Host "Workflow is still alive at $(Get-Date)"
            Start-Sleep -Seconds $interval
          }
          Write-Host "Keep-alive completed after 6 hours."
